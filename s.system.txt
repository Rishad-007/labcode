#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10

struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int turnaroundTime;
    int waitingTime;
};

int findShortestJob(struct Process processes[], int n, int currentTime) {
    int shortestJobIndex = -1;
    int shortestJobBurstTime = __INT_MAX__;
    
    for (int i = 0; i < n; i++) {
        if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime < shortestJobBurstTime && processes[i].remainingTime > 0) {
            shortestJobBurstTime = processes[i].remainingTime;
            shortestJobIndex = i;
        }
    }
    
    return shortestJobIndex;
}

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;
    
    while (completedProcesses < n) {
        int shortestJobIndex = findShortestJob(processes, n, currentTime);
        
        if (shortestJobIndex == -1) {
            currentTime++;
            continue;
        }
        
        struct Process *currentProcess = &processes[shortestJobIndex];
        
        currentProcess->remainingTime--;
        currentTime++;
        
        if (currentProcess->remainingTime == 0) {
            completedProcesses++;
            currentProcess->completionTime = currentTime;
            currentProcess->turnaroundTime = currentProcess->completionTime - currentProcess->arrivalTime;
            currentProcess->waitingTime = currentProcess->turnaroundTime - currentProcess->burstTime;
        }
    }
}

void displayResults(struct Process processes[], int n) {
    printf("Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].arrivalTime, processes[i].burstTime,
               processes[i].completionTime, processes[i].turnaroundTime, processes[i].waitingTime);
    }
    
    float averageTurnaroundTime = 0, averageWaitingTime = 0;
    
    for (int i = 0; i < n; i++) {
        averageTurnaroundTime += processes[i].turnaroundTime;
        averageWaitingTime += processes[i].waitingTime;
    }
    
    averageTurnaroundTime /= n;
    averageWaitingTime /= n;
    
    printf("\nAverage Turnaround Time: %.2f", averageTurnaroundTime);
    printf("\nAverage Waiting Time: %.2f", averageWaitingTime);
}

int main() {
    struct Process processes[MAX_PROCESSES];
    int n;
    
    printf("Enter the number of processes (up to %d): ", MAX_PROCESSES);
    scanf("%d", &n);
    
    printf("Enter the arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i+1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        
        processes[i].processID = i+1;
        processes[i].remainingTime = processes[i].burstTime;
    }
    
    calculateTimes(processes, n);
    displayResults(processes, n);
    
    return 0;
}
