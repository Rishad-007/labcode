*** Iterative Summation of Array Elements ***


#include <iostream>

using namespace std;

int main() {
  // Declare an array of integers.
  int arr[10];

  // Get the size of the array from the user.
  int n;
  cout << "Enter the size of the array: ";
  cin >> n;

  // Get the elements of the array from the user.
  for (int i = 0; i < n; i++) {
    cout << "Enter the element at index " << i << ": ";
    cin >> arr[i];
  }

  // Calculate the sum of the array elements.
  int sum = 0;
  for (int i = 0; i < n; i++) {
    sum += arr[i];
  }

  // Print the sum of the array elements.
  cout << "The sum of the array elements is: " << sum << endl;

  return 0;
}


*** Write a C++ function that takes an integer array as input and returns the second smallest element in the array. If the array has less than two elements, the function should return -1.
*** 

#include <iostream>

using namespace std;

int second_smallest(int arr[], int n) {
  // Check if the array has less than two elements.
  if (n < 2) {
    return -1;
  }

  // Initialize the smallest and second smallest elements.
  int smallest = arr[0];
  int second_smallest = arr[1];

  // Iterate over the array.
  for (int i = 2; i < n; i++) {
    // If the current element is smaller than the smallest element, then update the smallest element.
    if (arr[i] < smallest) {
      second_smallest = smallest;
      smallest = arr[i];
    } else if (arr[i] < second_smallest) {
      second_smallest = arr[i];
    }
  }

  // Return the second smallest element.
  return second_smallest;
}


int main() {
  // Declare an array of integers.
  int arr[] = {1, 2, 3, 4, 5};

  // Get the size of the array from the user.
  int n = sizeof(arr) / sizeof(arr[0]);

  // Print the second smallest element in the array.
  cout << "The second smallest element in the array is: " << second_smallest(arr, n) << endl;

  return 0;
}

*** Recursive Factorial ***

#include <iostream>

using namespace std;

int factorial(int n) {
  // Base case.
  if (n == 0) {
    return 1;
  }

  // Recursive case.
  return n * factorial(n - 1);
}

int main() {
  // Get the number from the user.
  int n;
  cout << "Enter a number: ";
  cin >> n;

  // Print the factorial of the number.
  cout << "The factorial of " << n << " is " << factorial(n) << endl;

  return 0;
}

*** Recursive Fibbonaci ***

include <iostream>

using namespace std;

int fibonacci(int n) {
  // Base cases.
  if (n == 0) {
    return 0;
  } else if (n == 1) {
    return 1;
  }

  // Recursive case.
  return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
  // Get the number from the user.
  int n;
  cout << "Enter a number: ";
  cin >> n;

  // Print the Fibonacci number.
  cout << "The Fibonacci number for " << n << " is " << fibonacci(n) << endl;

  return 0;
}

*** 

Write a recursive function to count the number of occurrences of a particular element in an integer array. The function should take three parameters: the array, its size, and the element to be counted. The function should return the number of occurrences of the element in the array.

***

#include <iostream>

using namespace std;

int countOccurrences(int arr[], int size, int element) {
    if (size == 0) {
        return 0;
    }
    
    if (arr[size - 1] == element) {
        return 1 + countOccurrences(arr, size - 1, element);
    } else {
        return countOccurrences(arr, size - 1, element);
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 4, 6, 4};
    int size = sizeof(arr) / sizeof(arr[0]);
    int element = 4;
    
    int count = countOccurrences(arr, size, element);
    
    cout << "The number of occurrences of " << element << " is: " << count << endl;
    
    return 0;
}


*** Binary Search ***

#include <iostream>

using namespace std;

int binary_search(int arr[], int low, int high, int x) {
  // Base case.
  if (high < low) {
    return -1;
  }

  // Find the middle index.
  int mid = (low + high) / 2;

  // If the element at the middle index is equal to the target element, then return the middle index.
  if (arr[mid] == x) {
    return mid;
  }

  // If the element at the middle index is less than the target element, then recursively search the right half of the array.
  else if (arr[mid] < x) {
    return binary_search(arr, mid + 1, high, x);
  }

  // If the element at the middle index is greater than the target element, then recursively search the left half of the array.
  else {
    return binary_search(arr, low, mid - 1, x);
  }
}

int main() {
  // Declare an array of integers.
  int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

  // Get the size of the array from the user.
  int n = sizeof(arr) / sizeof(arr[0]);

  // Get the target element from the user.
  int x;
  cout << "Enter the target element: ";
  cin >> x;

  // Print the index of the target element.
  int index = binary_search(arr, 0, n - 1, x);
  if (index != -1) {
    cout << "The target element is at index " << index << endl;
  } else {
    cout << "The target element is not found." << endl;
  }

  return 0;
}

*** Merge Sort ***

#include <iostream>

using namespace std;

void merge(int arr[], int p, int q, int r) {
  // Find sizes of two subarrays to be merged
  int n1 = q - p + 1;
  int n2 = r - q;

  /* Create temp arrays */
  int L[n1], M[n2];

  /*Copy data to temp arrays*/
  for (int i = 0; i < n1; ++i)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; ++j)
    M[j] = arr[q + 1 + j];


  /* Merge the temp arrays */

  // Initial indexes of first and second subarrays
  int i, j, k;
  i = 0;
  j = 0;
  k = p;

  while (i < n1 && j < n2) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = M[j];
      j++;
    }
    k++;
  }

  /* Copy remaining elements of L[] if any */
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }

  /* Copy remaining elements of M[] if any */
  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}

void mergeSort(int arr[], int l, int r) {
  if (l < r) {

    /* Find the middle point */
    int m = (l + r) / 2;

    /* Sort first and second halves */
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);

    /* Merge the sorted halves */
    merge(arr, l, m, r);
  }
}

void printArray(int arr[], int size) {
  for (int i = 0; i < size; ++i)
    cout << arr[i] << " ";
  cout << endl;
}

int main() {
  int arr[] = {10, 2, 9, 7, 8, 3, 5, 4, 6, 1};
  int n = sizeof(arr) / sizeof(arr[0]);

  cout << "Unsorted Array: ";
  printArray(arr, n);

  mergeSort(arr, 0, n - 1);

  cout << "Sorted array in ascending order: ";
  printArray(arr, n);

  return 0;
}


*** Quick Sort ***


#include <iostream>

using namespace std;

void quickSort(int arr[], int low, int high) {
  if (low < high) {

    // pi is partitioning index, arr[pi] is now at right place
    int pi = partition(arr, low, high);

    // Recursively sort elements before partition and after partition
    quickSort(arr, low, pi - 1);
    quickSort(arr, pi + 1, high);
  }
}

// This function takes last element as pivot, places the pivot element at
// its correct position in sorted array, and places all smaller (smaller than
// pivot) elements before pivot and all greater elements after pivot
int partition(int arr[], int low, int high) {

  // pivot
  int pivot = arr[high];

  // Index of smaller element than pivot
  int i = (low - 1);

  for (int j = low; j < high; j++) {

    // If current element is smaller than or equal to pivot
    if (arr[j] <= pivot) {

      // Increment index of smaller element
      i++;

      // Swap arr[i] and arr[j]
      int temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
    }
  }

  // Swap pivot with the greater element at index i
  int temp = arr[i + 1];
  arr[i + 1] = arr[high];
  arr[high] = temp;

  return (i + 1);
}

void printArray(int arr[], int size) {
  for (int i = 0; i < size; ++i)
    cout << arr[i] << " ";
  cout << endl;
}

int main() {
  int arr[] = {10, 2, 9, 7, 8, 3, 5, 4, 6, 1};
  int n = sizeof(arr) / sizeof(arr[0]);

  cout << "Unsorted Array: ";
  printArray(arr, n);

  quickSort(arr, 0, n - 1);

  cout << "Sorted array in ascending order: ";
  printArray(arr, n);

  return 0;
}



*** Given an array of integers, find the maximum element using divide and conquer approach.
***


#include <iostream>

using namespace std;

int max_element(int arr[], int low, int high) {
  // Base case.
  if (low == high) {
    return arr[low];
  }

  // Find the middle index.
  int mid = (low + high) / 2;

  // Find the maximum element in the left and right subarrays.
  int max_left = max_element(arr, low, mid);
  int max_right = max_element(arr, mid + 1, high);

  // Return the maximum of the maximum elements of the left and right subarrays.
  return max(max_left, max_right);
}

int main() {
  // Declare an array of integers.
  int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

  // Find the maximum element in the array.
  int max_element = max_element(arr, 0, sizeof(arr) / sizeof(arr[0]) - 1);

  // Print the maximum element.
  cout << "The maximum element is: " << max_element << endl;

  return 0;
}

***
 find the minimum number of coins needed to make change for a given amount using greedy algo **.

#include <iostream>

using namespace std;

int main() {
  // Create an array to store the coins.
  int coins[] = {1, 2, 5, 10, 20, 50, 100, 500, 1000};

  // Get the input from the user.
  int amount;
  cin >> amount;

  // Initialize the result.
  int result = 0;

  // Iterate over the coins.
  for (int i = 0; i < sizeof(coins) / sizeof(coins[0]); i++) {
    // While the amount is greater than or equal to the coin value.
    while (amount >= coins[i]) {
      // Subtract the coin value from the amount.
      amount -= coins[i];

      // Increment the result.
      result++;
    }
  }

  // Print the result.
  cout << result << endl;

  return 0;
}
 


*** Fractional Knapsack Greedy Algorithm ***

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

typedef struct {
   int v;
   int w;
   float d;
} Item;

void input(Item items[],int sizeOfItems) {
   cout << "Enter total "<< sizeOfItems <<" item's values and weight" <<
   endl;
   for(int i = 0; i < sizeOfItems; i++) {

      cout << "Enter "<< i+1 << " W ";
      cin >> items[i].w;

      cout << "Enter "<< i+1 << " V ";
      cin >> items[i].v;

   }
}
void display(Item items[], int sizeOfItems) {
   int i;
   cout << "values: ";
   for(i = 0; i < sizeOfItems; i++) {
      cout << items[i].v << "\t";
   }
   cout << endl << "weight: ";
   for (i = 0; i < sizeOfItems; i++) {
      cout << items[i].w << "\t";
   }
   cout << endl;
}
bool compare(Item i1, Item i2) {
   return (i1.d > i2.d);
}
float knapsack(Item items[], int sizeOfItems, int W) {
   int i, j;
   float totalValue = 0, totalWeight = 0;
   for (i = 0; i < sizeOfItems; i++) {
      items[i].d = (float)items[i].v / items[i].w; //typecasting done (v is int and w is also int so we get final value of d as int)
   }
   sort(items, items+sizeOfItems, compare);
   /*
   uncomment if u need to check the data after sortingis done
   cout << "values : ";
   for(i = 0; i < sizeOfItems; i++) {
      cout << items[i].v << "\t";
   }
   cout << endl << "weights: ";
   for (i = 0; i < sizeOfItems; i++) {
      cout << items[i].w << "\t";
   }
   cout << endl << "ratio  : ";
   for (i = 0; i < sizeOfItems; i++) {
      cout << items[i].d << "\t";
   }
   cout << endl;
   */
   for(i=0; i<sizeOfItems; i++) {
      if(totalWeight + items[i].w<= W) {
         totalValue += items[i].v ;
         totalWeight += items[i].w;
      } else {
         int wt = W-totalWeight;
         totalValue += (wt * items[i].d);
         totalWeight += wt;
         break;
      }
   }
   cout << "Total weight in bag " << totalWeight<<endl;
   return totalValue;
}
int main() {
   int W;
   Item items[4];
   input(items, 4);
   cout << "Entered data \n";
   display(items,4);
   cout<< "Enter Knapsack weight \n";
   cin >> W;
   float mxVal = knapsack(items, 4, W);
   cout << "If my knapack is  "<< W <<" the max value is  "<< mxVal;
}


***
Factoraila using Dynamic Programming **

#include <iostream>

using namespace std;

int factorial(int n) {
  // Create a table to store the factorials of numbers from 0 to n.
  int factorials[n + 1];
  factorials[0] = 1;

  // Iterate over the table and fill in the factorials of numbers from 1 to n.
  for (int i = 1; i <= n; i++) {
    factorials[i] = i * factorials[i - 1];
  }

  // Return the factorial of the given number.
  return factorials[n];
}

int main() {
  // Get the number from the user.
  int n;
  cin >> n;

  // Print the factorial of the given number using dynamic programming.
  cout << "The factorial of " << n << " using dynamic programming is: " << factorial(n) << endl;

  return 0;
}

** Fibbonaci using Dynamic Programming ***

#include <iostream>

using namespace std;

int fib(int n) {
  // Create an array to store the Fibonacci numbers.
  int fibs[n + 1];

  // Initialize the first two Fibonacci numbers.
  fibs[0] = 0;
  fibs[1] = 1;

  // Fill in the rest of the array.
  for (int i = 2; i <= n; i++) {
    fibs[i] = fibs[i - 1] + fibs[i - 2];
  }

  // Return the nth Fibonacci number.
  return fibs[n];
}

int main() {
  // Get the input from the user.
  int n;
  cin >> n;

  // Print the nth Fibonacci number.
  cout << fib(n) << endl;

  return 0;
}

***
0/1 Knapsack using Dynamic Programming ***


#include <iostream>

using namespace std;

int knapsack(int n, int W, int wt[], int val[]) {
  // Create a table to store the maximum profit.
  int dp[n + 1][W + 1];

  // Initialize the table.
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= W; j++) {
      dp[i][j] = 0;
    }
  }

  // Fill in the table.
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= W; j++) {
      if (wt[i - 1] <= j) {
        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - wt[i - 1]] + val[i - 1]);
      } else {
        dp[i][j] = dp[i - 1][j];
      }
    }
  }

  // Return the maximum profit.
  return dp[n][W];
}

int main() {
  // Get the input from the user.
  int n, W;
  cin >> n >> W;

  // Create arrays to store the weights and values of the items.
  int wt[n], val[n];
  for (int i = 0; i < n; i++) {
    cin >> wt[i] >> val[i];
  }

  // Print the maximum profit.
  cout << knapsack(n, W, wt, val) << endl;

  return 0;
}

---










