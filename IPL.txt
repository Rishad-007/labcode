#include <stdio.h>

#define MAX_PROCESSES 10
#define TIME_QUANTUM 2

struct Process {
    int processID;
    int burstTime;
    int remainingTime;
    int completionTime;
    int turnaroundTime;
    int waitingTime;
};

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;
    
    while (completedProcesses < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0) {
                // Execute the process for the time quantum or the remaining time, whichever is smaller
                int executionTime = (processes[i].remainingTime < TIME_QUANTUM) ? processes[i].remainingTime : TIME_QUANTUM;
                
                processes[i].remainingTime -= executionTime;
                currentTime += executionTime;
                
                if (processes[i].remainingTime == 0) {
                    // The process has completed execution
                    completedProcesses++;
                    processes[i].completionTime = currentTime;
                    processes[i].turnaroundTime = processes[i].completionTime;
                    processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
                }
            }
        }
    }
}

void displayResults(struct Process processes[], int n) {
    printf("Process\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].burstTime,
               processes[i].completionTime, processes[i].turnaroundTime, processes[i].waitingTime);
    }
    
    float averageTurnaroundTime = 0, averageWaitingTime = 0;
    
    for (int i = 0; i < n; i++) {
        averageTurnaroundTime += processes[i].turnaroundTime;
        averageWaitingTime += processes[i].waitingTime;
    }
    
    averageTurnaroundTime /= n;
    averageWaitingTime /= n;
    
    printf("\nAverage Turnaround Time: %.2f", averageTurnaroundTime);
    printf("\nAverage Waiting Time: %.2f", averageWaitingTime);
}

int main() {
    struct Process processes[MAX_PROCESSES];
    int n;
    
    printf("Enter the number of processes (up to %d): ", MAX_PROCESSES);
    scanf("%d", &n);
    
    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i+1);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        
        processes[i].processID = i+1;
        processes[i].remainingTime = processes[i].burstTime;
    }
    
    calculateTimes(processes, n);
    displayResults(processes, n);
    
    return 0;
}
